Today, I had a thought that keeping track of my progress on this app would be useful/helpful for a variety of reasons. I begin this log on 7.11.2019 though I have already made much progress.

2019.07.11
-- Researched and integrated .gitignore to hide config file (sensitive info). Took longer than it should have. Made a mistake that I caught later. I uploaded the config file, then overwrote (overwrit?) it by updating the repository. While researching online, I happened to read a line on a website which advised to re-shuffle the api/access keys whenever you accidentally upload a config file because it will continue to exist on previous versions of the app. So, all keys were updated so that (to my knowledge) they remain a secret.
-- O-Auth. This step has so far consumed many hours of reading and trying to understand what needs to be done. There are many layers to authentication which I am happy exist as a a consumer but tear me down as a developer. Read as much as could from Twitter's authentication page to wrap my head around this idea. I ended up finding a python library from the 'requests' module website which handles o-auth1 incredibly elegangtly. I was prepared to manually code each step to retrieve authentication. Before, I was getting many 400 responses; after using the OAuth1 module from requests_oauthlib, I received a 200 response on the first try (the greatest thing). However, I learned a lot about http requests from the process before encountering the OAuth1 library. The masochist in me wanted to try out manual authentication to see if I could. There is still much work to be done in terms of completing the 3-pronged authentication process described on Twitter and actual implementation on the app.

2019.07.12
-- Encryption methods established
-- Attempted to establish the "Sign in with Twitter" button on the template. Button is deployed but needs styling revisions
-- Dove into Flask documentation, mainly to learn about session handling. Still need to establish method for storing access keys during authorization

2019.07.13
-- "post request" step for oauth1 implemented successfully. Starts on app initialization. variables stored in memory while server connection is established
-- appears as though Twitter request tokens expire quickly. Need to implement method for refreshing tokens, or need to figure out what exactly causing the expiration
-- Finalized Twitter button styling, "background-size: cover" was the solution for clean formatting it appears
-- added app2.js file for interaction with button. App had trouble establishing online connection with D3 library. Solution was to download the d3.js files on local path
-- implemented the "get authorize" method for OAuth1. Needed to redirect to Twitter website for authorization, then returns oauth_verifier as a query string on the callback. Not difficult to store parameteres as variables
-- Tried to complete the OAuth1 process with the "post access" step. Appears to have been succussful, however,
-- It appears OAuth1 will make app testing difficult. Since the callback goes to the deployed website, the local server does not have access to the parameters Twitter sends back. Setting the callback as the local server seems not feasible/ill-advised. I will need to find a working solution for this, since constantly updating the deployed application for testing purposes is unwieldy and time-consuming.
-- OAuth1 is very time-consuming and a pain in the ***. Luckily it appears I won't need to manually set up the parameters thanks to a handy module

